/* SPDX-License-Identifier: GPL-2.0-only */
/*
 * Copyright (C) 2022, Andrew Powers-Holmes <aholmes@omnom.net>
 * Copyright (c) 2022, The Linux Foundation. All rights reserved.
 */

#ifndef __AR8K_H
#define __AR8K_H

#include <linux/delay.h>
#include <linux/regmap.h>
#include <linux/gpio.h>

#define AR8K_NUM_PORTS					6
#define AR8K_MAX_MTU					9000

#define PHY_ID_AR8236					0x004dd043
#define AR8K_ID_AR8236					0x03

#define AR8K_BUSY_WAIT_TIMEOUT				2000

#define AR8K_NUM_FDB_RECORDS				1024

#define AR8K_PORT_VID_DEF				1

#define AR8K_MAX_VLANS					16

/* dummy reg to change page */
#define AR8K_SW_REG_PAGE				0x40000

/* Global control registers */
#define AR8K_REG_MASK_CTRL				0x000
#define   AR8K_MASK_CTRL_REV_ID_MASK			GENMASK(7, 0)
#define   AR8K_MASK_CTRL_REV_ID(x)			FIELD_GET(AR8K_MASK_CTRL_REV_ID_MASK, x)
#define   AR8K_MASK_CTRL_DEVICE_ID_MASK			GENMASK(15, 8)
#define   AR8K_MASK_CTRL_DEVICE_ID(x)			FIELD_GET(AR8K_MASK_CTRL_DEVICE_ID_MASK, x)
#define   AR8K_MASK_CTRL_RESET				BIT(31)

#define AR8K_REG_PORT0_PAD_CTRL				0x004
#define   AR8K_PORT0_PAD_MAC_MII_EN			BIT(2)
#define   AR8K_PORT0_PAD_MAC_MII_TXCLK_FALLING_EDGE	BIT(1)
#define   AR8K_PORT0_PAD_MAC_MII_RXCLK_FALLING_EDGE	BIT(0)

#define AR8K_REG_PORT5_PAD_CTRL				0x008
#define   AR8K_PORT_PAD_RMII_TXCLK_FALLING_EDGE		BIT(19)
#define   AR8K_PORT_PAD_RMII_RXCLK_FALLING_EDGE		BIT(18)
#define   AR8K_PORT_PAD_RMII_EN				BIT(17)
#define   AR8K_PORT_PAD_MAC_200M_EN			BIT(7)

#define AR8K_REG_GLOBAL_MAC_ADDR0			0x020
#define AR8K_REG_GLOBAL_MAC_ADDR1			0x024

#define AR8K_REG_FLOOD_MASK				0x02c
#define   AR8K_REG_FLOOD_MASK_UC_DP_S			0
#define   AR8K_REG_FLOOD_MASK_IGMP_DP_S			8
#define   AR8K_REG_FLOOD_MASK_MC_DP_S			16
#define   AR8K_REG_FLOOD_MASK_BC_DP_S			25

#define AR8K_REG_GCR					0x030
#define   AR8K_GCR_MAX_FRAME_SIZE_MASK			GENMASK(13, 0)
#define   AR8K_GCR_MAX_FRAME_SIZE(x)			FIELD_GET(AR8K_GCR_MAX_FRAME_SIZE_MASK, x)
#define   AR8K_GCR_RATE_DROP_THRESH_MASK		GENMASK(25, 24)
#define   AR8K_GCR_RATE_DROP_THRESH(x)			FIELD_GET(AR8K_GCR_RATE_DROP_THRESH_MASK, x)
#define   AR8K_GCR_RATE_DROP_EN				BIT(29)

/* VLAN Table registers */
#define AR8K_REG_VTU_FUNC0				0x040
#define   AR8K_VTU_FUNC0_OP_MASK			GENMASK(2, 0)
#define   AR8K_VTU_FUNC0_BUSY				BIT(3)
#define   AR8K_VTU_FUNC0_FULL				BIT(4)
#define   AR8K_VTU_FUNC0_PORT_NUM_MASK			GENMASK(11, 8)
#define   AR8K_VTU_FUNC0_PORT_NUM(x)			FIELD_PREP(AR8K_VTU_FUNC0_PORT_NUM_MASK, x)
#define   AR8K_VTU_FUNC0_VID_MASK			GENMASK(27, 16)
#define   AR8K_VTU_FUNC0_VID(x)				FIELD_PREP(AR8K_VTU_FUNC0_VID_MASK, x)
#define   AR8K_VTU_FUNC0_PRI_MASK			GENMASK(30, 28)
#define   AR8K_VTU_FUNC0_PRI(x)				FIELD_PREP(AR8K_VTU_FUNC0_PRI_MASK, x)
#define AR8K_REG_VTU_FUNC1				0x044
#define   AR8K_VTU_VID_MASK				GENMASK(6, 0)
#define   AR8K_VTU_VID_MEM_PORT0			BIT(0)
#define   AR8K_VTU_VID_MEM_PORT1			BIT(1)
#define   AR8K_VTU_VID_MEM_PORT2			BIT(2)
#define   AR8K_VTU_VID_MEM_PORT3			BIT(3)
#define   AR8K_VTU_VID_MEM_PORT4			BIT(4)
#define   AR8K_VTU_VID_MEM_PORT5			BIT(5)
#define   AR8K_VTU_VID_VALID				BIT(11)

/* Lookup registers */
#define AR8K_REG_ATU_FUNC0				0x050
#define   AR8K_ATU_OP_MASK				GENMASK(2, 0)
#define   AR8K_ATU_BUSY					BIT(3)
#define   AR8K_ATU_FLUSH_STATIC				BIT(4)
#define   AR8K_ATU_PORT_MASK				GENMASK(11, 8)
#define   AR8K_ATU_PORT_NUM(x)				FIELD_PREP(AR8K_ATU_PORT_MASK, x)
#define   AR8K_ATU_FULL_VIO				BIT(12)
#define   AR8K_ATU_ADDR5_MASK				GENMASK(23, 16)
#define   AR8K_ATU_ADDR5(x)				FIELD_PREP(AR8K_ATU_ADDR5_MASK, x)
#define   AR8K_ATU_ADDR4_MASK				GENMASK(31, 24)
#define   AR8K_ATU_ADDR4(x)				FIELD_PREP(AR8K_ATU_ADDR4_MASK, x)
#define AR8K_REG_ATU_FUNC1				0x054
#define   AR8K_ATU_ADDR3_MASK				GENMASK(7, 0)
#define   AR8K_ATU_ADDR3(x)				FIELD_PREP(AR8K_ATU_ADDR3_MASK, x)
#define   AR8K_ATU_ADDR2_MASK				GENMASK(15, 8)
#define   AR8K_ATU_ADDR2(x)				FIELD_PREP(AR8K_ATU_ADDR2_MASK, x)
#define   AR8K_ATU_ADDR1_MASK				GENMASK(23, 16)
#define   AR8K_ATU_ADDR1(x)				FIELD_PREP(AR8K_ATU_ADDR1_MASK, x)
#define   AR8K_ATU_ADDR0_MASK				GENMASK(31, 24)
#define   AR8K_ATU_ADDR0(x)				FIELD_PREP(AR8K_ATU_ADDR0_MASK, x)
#define AR8K_REG_ATU_FUNC2				0x058
#define   AR8K_ATU_DEST_PORT_MASK			GENMASK(5, 0)
#define   AR8K_ATU_DEST_PORT0				BIT(0)
#define   AR8K_ATU_DEST_PORT1				BIT(1)
#define   AR8K_ATU_DEST_PORT2				BIT(2)
#define   AR8K_ATU_DEST_PORT3				BIT(3)
#define   AR8K_ATU_DEST_PORT4				BIT(4)
#define   AR8K_ATU_DEST_PORT5				BIT(5)
#define   AR8K_ATU_CROSS_PORT_STATE			BIT(8)
#define   AR8K_ATU_HASH_HIGH_ADDR 			BIT(9)
#define   AR8K_ATU_AT_PRIORITY_MASK			GENMASK(11, 10)
#define   AR8K_ATU_AT_PRIORITY(x)			FIELD_PREP(AR8K_ATU_AT_PRIORITY_MASK, x)
#define   AR8K_ATU_AT_PRIORITY_EN			BIT(12)
#define   AR8K_ATU_MIRROR_EN				BIT(13)
#define   AR8K_ATU_SA_DROP_EN				BIT(14)	/* Not supported */
#define   AR8K_ATU_MAC_CLONE				BIT(15)	/* Not supported */
#define   AR8K_ATU_STATUS_MASK				GENMASK(19, 16)
#define   AR8K_ATU_STATUS(x)				FIELD_PREP(AR8K_ATU_STATUS_MASK, x)
#define   AR8K_ATU_STATUS_STATIC			AR8K_ATU_STATUS(0xf)
#define AR8K_REG_ATU_CTRL				0x05c
#define   AR8K_ATU_LOOP_CHECK_MASK			GENMASK(26, 24)
#define   AR8K_ATU_LOOP_CHECK(x)			FIELD_PREP(AR8K_ATU_LOOP_CHECK_MASK, x)
#define   AR8K_ATU_LOOP_CHECK_DISABLE			AR8K_ATU_LOOP_CHECK(0)
#define   AR8K_ATU_LOOP_CHECK_1MS			AR8K_ATU_LOOP_CHECK(1)
#define   AR8K_ATU_LOOP_CHECK_10MS			AR8K_ATU_LOOP_CHECK(2)
#define   AR8K_ATU_LOOP_CHECK_100MS			AR8K_ATU_LOOP_CHECK(3)
#define   AR8K_ATU_LOOP_CHECK_500MS			AR8K_ATU_LOOP_CHECK(4)
#define   AR8K_ATU_DROP_VID_4095 			BIT(22)
#define   AR8K_ATU_STAG_MODE				BIT(21)
#define   AR8K_ATU_LEARN_CHANGE				BIT(18)
#define   AR8K_ATU_AGE_EN				BIT(17)
#define   AR8K_ATU_AGE_TIME_MASK			GENMASK(15, 0)
#define   AR8K_ATU_AGE_TIME(x)				FIELD_PREP(AR8K_ATU_AGE_TIME_MASK, x)
#define   AR8K_ATU_AGE_TIME_DEFAULT			AR8K_ATU_AGE_TIME(0x2b)

#define AR8K_REG_SVC_TAG_TYPE				0x074
#define   AR8K_STAG_TYPE_MASK				GENMASK(15, 0)
#define   AR8K_STAG_TYPE(x)				FIELD_PREP(AR8K_SVC_TAG_TYPE_MASK, x)

#define AR8K_REG_CPU_PORT				0x078
#define   AR8K_CPU_PORT_MIRROR_NUM_MASK			GENMASK(7, 4)
#define   AR8K_CPU_PORT_MIRROR_NUM(x)			FIELD_PREP(AR8K_CPU_PORT_MIRROR_NUM_MASK, x)
#define   AR8K_CPU_PORT_MIRROR_NONE			FIELD_PREP(AR8K_CPU_PORT_MIRROR_NUM_MASK, 0xf)
#define   AR8K_CPU_PORT_EN				BIT(8)

#define AR8K_REG_MIB					0x080
#define   AR8K_MIB_BUSY					BIT(17)
#define   AR8K_MIB_FLUSH				BIT(24)
#define   AR8K_MIB_EN					BIT(30)

#define AR8K_REG_MDIO_MASTER_CTRL			0x098
#define   AR8K_MDIO_MASTER_DATA_MASK			GENMASK(15, 0)
#define   AR8K_MDIO_MASTER_DATA(x)			FIELD_PREP(AR8K_MDIO_MASTER_DATA_MASK, x)
#define   AR8K_MDIO_MASTER_REG_ADDR_MASK		GENMASK(20, 16)
#define   AR8K_MDIO_MASTER_REG_ADDR(x)			FIELD_PREP(AR8K_MDIO_MASTER_REG_ADDR_MASK, x)
#define   AR8K_MDIO_MASTER_PHY_ADDR_MASK		GENMASK(25, 21)
#define   AR8K_MDIO_MASTER_PHY_ADDR(x)			FIELD_PREP(AR8K_MDIO_MASTER_PHY_ADDR_MASK, x)
#define   AR8K_MDIO_MASTER_SUP_PRE 			BIT(26)
#define   AR8K_MDIO_MASTER_READ				BIT(27)
#define   AR8K_MDIO_MASTER_WRITE			0
#define   AR8K_MDIO_MASTER_EN				BIT(30)
#define   AR8K_MDIO_MASTER_BUSY				BIT(31)
#define   AR8K_MDIO_MASTER_MAX_PORTS			5
#define   AR8K_MDIO_MASTER_MAX_REG			32

/* Per-port registers */
#define AR8K_REG_PORT_STATUS(_port)			(0x100 + (_port) * 0x100)
#define   AR8K_PORT_STATUS_SPEED			GENMASK(1, 0)
#define   AR8K_PORT_STATUS_SPEED_10			0
#define   AR8K_PORT_STATUS_SPEED_100			0x1
#define   AR8K_PORT_STATUS_TXMAC			BIT(2)
#define   AR8K_PORT_STATUS_RXMAC			BIT(3)
#define   AR8K_PORT_STATUS_TXFLOW			BIT(4)
#define   AR8K_PORT_STATUS_RXFLOW			BIT(5)
#define   AR8K_PORT_STATUS_DUPLEX			BIT(6)
#define   AR8K_PORT_STATUS_LINK_UP			BIT(8)
#define   AR8K_PORT_STATUS_LINK_AUTO			BIT(9)
#define   AR8K_PORT_STATUS_LINK_PAUSE			BIT(10)
#define   AR8K_PORT_STATUS_FLOW_AUTO			BIT(12)

#define AR8K_REG_PORT_CTRL(_port)			(0x104 + (_port) * 0x100)
#define   AR8K_PORT_CTRL_STATE_MASK			GENMASK(2, 0)
#define   AR8K_PORT_CTRL_STATE(x)			FIELD_PREP(AR8K_PORT_CTRL_STATE_MASK, x)
#define   AR8K_PORT_CTRL_STATE_DISABLED			0
#define   AR8K_PORT_CTRL_STATE_BLOCKING			0x1
#define   AR8K_PORT_CTRL_STATE_LISTENING		0x2
#define   AR8K_PORT_CTRL_STATE_LEARNING			0x3
#define   AR8K_PORT_CTRL_STATE_FORWARDING		0x4
/* port forwarding state */
#define   AR8K_PORT_CTRL_LOCK_DROP			BIT(5)
#define   AR8K_PORT_CTRL_PORT_LOCK			BIT(6)
#define   AR8K_PORT_CTRL_LEARN_LOCK			BIT(7)
/* egress 802.1q mode */
#define   AR8K_PORT_CTRL_VLAN_MODE_MASK			GENMASK(9, 8)
#define   AR8K_PORT_CTRL_VLAN_MODE(x)			FIELD_PREP(AR8K_PORT_CTRL_VLAN_MODE_MASK, x)
#define   AR8K_PORT_CTRL_VLAN_MODE_IGNORE		AR8K_PORT_CTRL_VLAN_MODE(0x0)
#define   AR8K_PORT_CTRL_VLAN_MODE_UNTAGGED		AR8K_PORT_CTRL_VLAN_MODE(0x1)
#define   AR8K_PORT_CTRL_VLAN_MODE_TAGGED		AR8K_PORT_CTRL_VLAN_MODE(0x2)
#define   AR8K_PORT_CTRL_VLAN_MODE_HYBRID		AR8K_PORT_CTRL_VLAN_MODE(0x3)
#define   AR8K_PORT_CTRL_IGMP_SNOOP			BIT(10)
#define   AR8K_PORT_CTRL_HEADER_EN			BIT(11)
#define   AR8K_PORT_CTRL_MAC_LOOP			BIT(12)
#define   AR8K_PORT_CTRL_SINGLE_VLAN			BIT(13)
#define   AR8K_PORT_CTRL_LEARN				BIT(14)
#define   AR8K_PORT_CTRL_MIRROR_TX			BIT(16)
#define   AR8K_PORT_CTRL_MIRROR_RX			BIT(17)
#define   AR8K_PORT_CTRL_DHCP_ACK			BIT(19)
#define   AR8K_PORT_CTRL_IGMP_JOIN			BIT(20)
#define   AR8K_PORT_CTRL_IGMP_MLD_LEAVE			BIT(21)
#define   AR8K_PORT_CTRL_ARP_LEAKY			BIT(22)
#define   AR8K_PORT_CTRL_EAPOL				BIT(23)

#define AR8K_REG_PORT_VLAN(_port)			(0x108 + (_port) * 0x100)
#define   AR8K_PORT_VLAN_FORCE_DEFAULT			BIT(12)
#define   AR8K_PORT_VLAN_DEFAULT_ID_MASK		GENMASK(27, 16)
#define   AR8K_PORT_VLAN_DEFAULT_ID(x)			FIELD_PREP(AR8K_PORT_VLAN_DEFAULT_ID_MASK, x)
#define   AR8K_PORT_VLAN_FORCE_EN			BIT(28)
#define   AR8K_PORT_VLAN_PRIORITY_MASK			GENMASK(31, 29)
#define   AR8K_PORT_VLAN_PRIORITY(x)			FIELD_PREP(AR8K_PORT_VLAN_PRIORITY_MASK, x)


#define AR8K_REG_PORT_VLAN2(_port)			(0x10c + (_port) * 0x100)
#define   AR8K_PORT_VLAN_MULTI_LEAKY			BIT(13)
#define   AR8K_PORT_VLAN_UNI_LEAKY			BIT(14)
#define   AR8K_PORT_VLAN_MEMBER_MASK			GENMASK(22, 16)
#define   AR8K_PORT_VLAN_MEMBER_PORT0			BIT(16)
#define   AR8K_PORT_VLAN_MEMBER_PORT1			BIT(17)
#define   AR8K_PORT_VLAN_MEMBER_PORT2			BIT(18)
#define   AR8K_PORT_VLAN_MEMBER_PORT3			BIT(19)
#define   AR8K_PORT_VLAN_MEMBER_PORT4			BIT(20)
#define   AR8K_PORT_VLAN_MEMBER_PORT5			BIT(21)
#define   AR8K_PORT_VLAN_TX_PRIO			BIT(23)
#define   AR8K_PORT_VLAN_ING_VLAN_MODE_MASK		GENMASK(28, 27)
#define   AR8K_PORT_VLAN_ING_VLAN_MODE(x)		FIELD_PREP(AR8K_PORT_VLAN_ING_VLAN_MODE_MASK, x)
#define   AR8K_PORT_VLAN_ING_VLAN_MODE_ALL		AR8K_PORT_VLAN_ING_VLAN_MODE(0)
#define   AR8K_PORT_VLAN_ING_VLAN_MODE_TAG		AR8K_PORT_VLAN_ING_VLAN_MODE(1)
#define   AR8K_PORT_VLAN_ING_VLAN_MODE_UNTAG		AR8K_PORT_VLAN_ING_VLAN_MODE(2)
#define   AR8K_PORT_VLAN_ING_VLAN_MODE_MIXED		AR8K_PORT_VLAN_ING_VLAN_MODE(3)
#define   AR8K_PORT_VLAN_CORE_PORT			BIT(29)
#define   AR8K_PORT_VLAN_MODE_MASK			GENMASK(31, 30)
#define   AR8K_PORT_VLAN_MODE(x)			FIELD_PREP(AR8K_PORT_VLAN_MODE_MASK, x)
#define   AR8K_PORT_VLAN_MODE_DISABLE			AR8K_PORT_VLAN_MODE(0)
#define   AR8K_PORT_VLAN_MODE_FALLBACK			AR8K_PORT_VLAN_MODE(1)
#define   AR8K_PORT_VLAN_MODE_CHECK			AR8K_PORT_VLAN_MODE(2)
#define   AR8K_PORT_VLAN_MODE_SECURE			AR8K_PORT_VLAN_MODE(3)

#define AR8K_PORT_MIB_COUNTER(_port)			(0x20000 + (_port) * 0x100)

enum {
	AR8K_PORT_SPEED_10M = 0,
	AR8K_PORT_SPEED_100M = 1,
	AR8K_PORT_SPEED_ERR = 3,
};

enum ar8k_fdb_cmd {
	AR8K_FDB_FLUSH	= 1,
	AR8K_FDB_LOAD = 2,
	AR8K_FDB_PURGE = 3,
	AR8K_FDB_FLUSH_PORT = 5,
	AR8K_FDB_NEXT = 6,
	AR8K_FDB_SEARCH = 7,
};

enum ar8k_vlan_cmd {
	AR8K_VLAN_FLUSH = 1,
	AR8K_VLAN_LOAD = 2,
	AR8K_VLAN_PURGE = 3,
	AR8K_VLAN_REMOVE_PORT = 4,
	AR8K_VLAN_NEXT = 5,
	AR8K_VLAN_READ = 6,
};

struct ar8k_match_data {
	u8 id;
};

struct ar8k_priv {
	u8 switch_id;
	u8 switch_revision;
	struct device *dev;
	struct dsa_switch *ds;
	struct dsa_switch_ops ops;
	/* Each bit corresponds to a port. This switch can support a max of 7 port.
	 * Bit 1: port enabled. Bit 0: port disabled.
	 */
	u8 port_enabled_map;
	struct regmap *regmap;
	struct mii_bus *bus;
	struct mutex reg_mutex;
	struct gpio_desc *reset_gpio;
};

struct ar8k_mib_desc {
	unsigned int size;
	unsigned int offset;
	const char *name;
};

struct ar8k_fdb {
	u8 port_mask;
	u8 aging;
	u8 mac[6];
};

#endif /* __AR8K_H */
